# --- streamlit_app.py ---
import streamlit as st
import folium
from streamlit_folium import st_folium
from fetch import get_aircraft_df, track_aircraft_inactivity
from geopy.distance import geodesic
import math
import pandas as pd
from ais_stream import ais_queue, start_ais_stream

st.set_page_config(layout="wide")
st.title("Radar ‚Äì Risk-Aware Live Tracker")

# Bounding Box toggle
bbox_choice = st.radio("Bounding Box", ["YVR", "Wide"], index=0)
BBOX = (47.0, -134.0, 55.0, -118.0) if bbox_choice == "YVR" else (30.0, -150.0, 60.0, -100.0)

# YVR coordinates
YVR_COORDS = (49.1947, -123.1792)
APPROACH_HEADING = 135

# Load aircraft data
df = get_aircraft_df(bbox=BBOX)
df = df.dropna(subset=["lat", "lon", "velocity", "track", "callsign", "baro_alt"])

def haversine_bearing(lat1, lon1, lat2, lon2):
    dLon = math.radians(lon2 - lon1)
    lat1, lat2 = map(math.radians, [lat1, lat2])
    x = math.sin(dLon) * math.cos(lat2)
    y = math.cos(lat1)*math.sin(lat2) - math.sin(lat1)*math.cos(lat2)*math.cos(dLon)
    return (math.degrees(math.atan2(x, y)) + 360) % 360

def classify_aircraft(row):
    speed_knots = row["velocity"] * 1.943
    coords = (row["lat"], row["lon"])
    dist_to_yvr_km = geodesic(coords, YVR_COORDS).km
    dist_nm = dist_to_yvr_km * 0.539957
    eta_min = (dist_nm / speed_knots) * 60 if speed_knots > 50 else 999
    expected_alt = dist_nm * 300
    actual_alt = row["baro_alt"]
    alt_diff = actual_alt - expected_alt
    expected_bearing = haversine_bearing(row["lat"], row["lon"], *YVR_COORDS)
    heading_diff = abs(row["track"] - expected_bearing)
    heading_diff = min(heading_diff, 360 - heading_diff)
    prefix = row["callsign"][:3].upper()
    airline = {
        "ACA": "Air Canada",
        "WJA": "WestJet",
        "DAL": "Delta",
        "UAL": "United",
        "FDX": "FedEx",
        "UPS": "UPS",
    }.get(prefix, "Unknown")
    if eta_min > 20:
        eta_risk = "üü¢ Normal"
    elif eta_min > 10:
        eta_risk = "üü† Tight"
    else:
        eta_risk = "üî¥ High Risk"
    if alt_diff > 1500:
        alt_status = "üîª Too High"
    elif alt_diff < -1500:
        alt_status = "‚ö†Ô∏è Low"
    else:
        alt_status = "‚úÖ OK"
    heading_status = "‚úÖ OK" if heading_diff < 30 else "‚ö†Ô∏è Off-Course"
    is_danger = (
        speed_knots > 300 and
        dist_to_yvr_km < 50 and
        abs(row.get("vertical_rate", 0)) > 1500 and
        alt_status != "‚úÖ OK" and
        heading_status != "‚úÖ OK"
    )
    return pd.Series({
        "speed_knots": speed_knots,
        "dist_km": dist_to_yvr_km,
        "eta_min": eta_min,
        "eta_risk": eta_risk,
        "altitude_check": alt_status,
        "heading_check": heading_status,
        "airline": airline,
        "is_danger": is_danger
    })

# Add analysis columns
df = df.join(df.apply(classify_aircraft, axis=1))
df = track_aircraft_inactivity(df)

# Start AIS stream
if "ais_started" not in st.session_state:
    start_ais_stream()
    st.session_state["ais_started"] = True
    st.sidebar.subheader("üì° AIS Stream Status")
# Fetch ship data from AIS queue
ship_data = []
while not ais_queue.empty():
    try:
        item = ais_queue.get_nowait()
        pos = item.get("Message", {}).get("Position", {})
        meta = item.get("MetaData", {})
        ship_data.append({
            "mmsi": meta.get("MMSI"),
            "lat": pos.get("Lat"),
            "lon": pos.get("Lon"),
            "speed": pos.get("SOG"),
            "course": pos.get("COG"),
            "heading": pos.get("Heading")
        })
    except Exception as e:
        st.warning(f"Error parsing AIS data: {e}")

# Count how many AIS messages are in the queue
ais_msg_count = ais_queue.qsize()
st.sidebar.write(f"üîÅ Messages in queue: `{ais_msg_count}`")

# Show sample message if available
if ais_msg_count > 0:
    try:
        example = ais_queue.queue[0]  # Peek first item
        st.sidebar.write("‚úÖ WebSocket: Connected")
        st.sidebar.json(example)
    except Exception as e:
        st.sidebar.error(f"Error reading AIS queue: {e}")
else:
    st.sidebar.warning("‚ö†Ô∏è No AIS data received yet.")
#ship_df = pd.DataFrame(ship_data).dropna(subset=["lat", "lon"])
filtered_ship_data = [
    row for row in ship_data if row.get("lat") is not None and row.get("lon") is not None
]
if filtered_ship_data:
    ship_df = pd.DataFrame(filtered_ship_data)
else:
    ship_df = pd.DataFrame(columns=["mmsi", "lat", "lon", "speed", "course", "heading"])

if st.checkbox("üîç Show raw AIS messages"):
    st.json(ship_data[:3])


# Create map
m = folium.Map(location=[49.0, -123.0], zoom_start=6, tiles="CartoDB positron")

# Aircraft markers
for _, row in df.iterrows():
    popup = f"""
        ‚úàÔ∏è <b>{row['callsign']}</b><br>
        Airline: {row['airline']}<br>
        Speed: {row['speed_knots']:.1f} kn<br>
        ETA: {row['eta_min']:.1f} min ‚Äì {row['eta_risk']}<br>
        Altitude Check: {row['altitude_check']}<br>
        Heading Check: {row['heading_check']}<br>
        Distance: {row['dist_km']:.1f} km<br>
        Movement: {row['movement_status']}
    """
    if row["is_danger"]:
        popup += "<br><b>‚ò¢Ô∏è DANGER ZONE</b>"
    icon_color = "red" if row["is_danger"] else (
        "orange" if row["eta_risk"].startswith("üü†") else (
            "blue" if row["eta_risk"].startswith("üî¥") else "green"
        )
    )
    folium.Marker(
        location=[row["lat"], row["lon"]],
        popup=popup,
        icon=folium.Icon(color=icon_color, icon="plane", prefix="fa")
    ).add_to(m)

# Ship markers
for _, row in ship_df.iterrows():
    popup = f"""
        üö¢ MMSI: {row['mmsi']}<br>
        Speed: {row['speed']} kn<br>
        Course: {row['course']}¬∞
    """
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=5,
        color="navy",
        fill=True,
        fill_opacity=0.6,
        popup=popup
    ).add_to(m)

# Display map
st_folium(m, width=1300, height=700)

# Optional debug table
if st.checkbox("üìä Show risk analysis table"):
    st.dataframe(df[[
        "callsign", "airline", "speed_knots", "eta_min",
        "eta_risk", "altitude_check", "heading_check",
        "movement_status", "is_danger"
    ]])

# Sidebar
st.sidebar.info("‚ö†Ô∏è OpenSky + AISStream live traffic feed. Not for real-world flight operations.")

